package training.iqgateway.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import training.iqgateway.dto.LoginRequest;
import training.iqgateway.entities.User;
import training.iqgateway.service.UserService;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "http://localhost:5173")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
		System.out.println("Entered into controller");
	    boolean authenticated = userService.authenticate(loginRequest);
	    if (authenticated) {
	        // Example: Return a JWT token in real scenarios
	        return ResponseEntity.ok("Login successful");
	    } else {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
	                .body("Invalid username or password");
	    }
	}
	@GetMapping("/{email}")
	public ResponseEntity<?> getByEmail(@PathVariable String email) {
	    User user = userService.findByEmail(email);
	    
	    if (user == null) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                             .body("User not found with email: " + email);
	    }

	    return ResponseEntity.ok(user);
	}

	
//	@PostMapping("/login")
//	public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
//		System.out.println("Entered into controller");
//	    boolean isAuthenticated = userService.authenticate(loginRequest);
//
//	    if (isAuthenticated) {
//	        // In production, you would return a JWT token here
//	        return ResponseEntity.ok("Login successful");
//	    } else {
//	        return ResponseEntity
//	                .status(HttpStatus.UNAUTHORIZED)
//	                .body("Invalid email or password");
//	    }
//	}


}
