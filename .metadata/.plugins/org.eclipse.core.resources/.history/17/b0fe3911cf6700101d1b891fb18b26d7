package training.iqgateway.service;

import java.util.Optional;

//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Service;
//
//import training.iqgateway.dto.LoginRequest;
//import training.iqgateway.entities.User;
//import training.iqgateway.repository.UserRepository;
//
//@Service
//public class UserService {
//	
//	@Autowired
//	private UserRepository userRepository;
//	
//}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import training.iqgateway.dto.LoginRequest;
import training.iqgateway.entities.User;
import training.iqgateway.repository.UserRepository;


@Service
public class UserService {
    private final UserRepository userRepository;
    private final BCryptPasswordEncoder passwordEncoder;
    @Autowired
    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
        this.passwordEncoder = new BCryptPasswordEncoder();
    }
	public Optional<User> findByEmail(String email) {
		return userRepository.findByEmail(email);
	}
	
	public boolean authenticate(LoginRequest loginReq) {
//		System.out.println("Entered Into Auth");
//		Optional<User> user = findByEmail(loginReq.getEmail());
//		if(user == null) {
//			System.out.println("User Is NUll");
//		}
//		if(user.getEmail().equals(loginReq.getEmail()) && user.getPassword().equals(loginReq.getPassword())) {
//			System.out.println(user);
//			return true;
//		} 
		return false;
	}
    public User registerUser(User user) {
        // Check if username or email already exists
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            throw new RuntimeException("Username is already taken");
        }
        if (userRepository.findByEmail(user.getEmail()).isPresent()) {
            throw new RuntimeException("Email is already registered");
        }
        // Encode password before saving
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        // Save the user
        return userRepository.save(user);
    }
}
