package training.iqgateway.services;

import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import training.iqgateway.dtos.DoctorAvailabilityDto;
import training.iqgateway.dtos.DoctorDto;
import training.iqgateway.dtos.DoctorRegistrationDto;
import training.iqgateway.dtos.UserDto;
import training.iqgateway.entities.Doctor;
import training.iqgateway.entities.DoctorAvailability;
import training.iqgateway.entities.User;
import training.iqgateway.repositories.DoctorAvailabilityRepository;
import training.iqgateway.repositories.DoctorRepository;
import training.iqgateway.repositories.PatientRepository;
import training.iqgateway.repositories.UserRepository;


@Service
public class AdminService {

	@Autowired
	private  UserRepository userRepository;
	@Autowired
	private PatientRepository patientRepository;
	@Autowired
	private DoctorRepository doctorRepository;
	@Autowired
    private DoctorAvailabilityRepository availabilityRepository;
    
//    @Autowired
//    private PasswordEncoder passwordEncoder;
	
	
	
//	public User createUser(User user) {
//		return userRepository.save(user);
//	}
//	
//	public User getUserById(String id) {
//		return userRepository.findById(id).orElse(null);
//	}
//	
//	public User getByEmail(String email) {
//		return userRepository.findByEmail(email);
//	}
//	
//	public List<User> getUsersByRole(String role) {
//		return userRepository.findByRole(role);
//	}
//	
//	public List<User> getAllUsers() {
//		return userRepository.findAll();
//	}
//	
//	public User updateUser(User user) {
//		if (userRepository.existsById(user.getId())) {
//			return userRepository.save(user);
//		}
//		return null; 
//	}
//	
//	public void deleteUser(String id) {
//		userRepository.deleteById(id);
//	}
//	
//	public Patient createPatient(Patient patient) {
//		return patientRepository.save(patient);
//	}
//	
//	public Patient getPatientById(String id) {
//		return patientRepository.findById(id).orElse(null);
//	}
//	
//	public List<Patient> getAllPatients() {
//		return patientRepository.findAll();
//	}
//	
//	public Patient updatePatient(Patient patient) {
//		if (patientRepository.existsById(patient.getId())) {
//			return patientRepository.save(patient);
//		}
//		return null;
//	}
//	
//	public void deletePatient(String id) {
//		patientRepository.deleteById(id);
//	}
//	
//	public Doctor createDoctor(Doctor doctor) {
//		return doctorRepository.save(doctor);
//	}
//	
//	public Doctor getDoctorById(String id) {
//		return doctorRepository.findById(id).orElse(null);
//	}
//	public List<Doctor> getAllDoctors() {
//		return doctorRepository.findAll();
//	}
//	
//	public Doctor updateDoctor(Doctor doctor) {
//		if (doctorRepository.existsById(doctor.getId())) {
//			return doctorRepository.save(doctor);
//		}
//		return null; 
//	}
//	
//	public void deleteDoctor(String id) {
//		doctorRepository.deleteById(id);
//	}
    public DoctorDto registerDoctor(DoctorRegistrationDto registrationDto) {
        // Check if user already exists
        if (userRepository.existsByEmail(registrationDto.getEmail())) {
            throw new RuntimeException("User with email already exists");
        }
        if (userRepository.existsByUsername(registrationDto.getUsername())) {
            throw new RuntimeException("User with username already exists");
        }

        // Create and save User
        User user = new User();
        user.setUsername(registrationDto.getUsername());
        user.setEmail(registrationDto.getEmail());
        user.setPassword(passwordEncoder.encode(registrationDto.getPassword()));
        user.setRole(registrationDto.getRole());
        user = userRepository.save(user);

        // Create and save Doctor
        Doctor doctor = new Doctor();
        doctor.setUser(user);
        doctor.setActive(registrationDto.isActive());
        doctor.setSpecializations(registrationDto.getSpecializations());
        
        // Convert base64 to byte array if provided
        if (registrationDto.getProfilePictureBase64() != null) {
            doctor.setProfilePicture(Base64.getDecoder().decode(registrationDto.getProfilePictureBase64()));
        }
        
        doctor = doctorRepository.save(doctor);

        // Create and save Availabilities
        List<DoctorAvailability> availabilities = new ArrayList<>();
        if (registrationDto.getAvailabilities() != null) {
            for (DoctorAvailabilityDto availDto : registrationDto.getAvailabilities()) {
                DoctorAvailability availability = new DoctorAvailability();
                availability.setDoctor(doctor);
                availability.setDayOfWeek(availDto.getDayOfWeek());
                availability.setStartTime(availDto.getStartTime());
                availability.setEndTime(availDto.getEndTime());
                availability.setAvailable(availDto.isAvailable());
                availability.setAppointmentDuration(availDto.getAppointmentDuration());
                availabilities.add(availabilityRepository.save(availability));
            }
        }

        return convertToDto(doctor, availabilities);
    }

    public List<DoctorDto> getAllDoctors() {
        List<Doctor> doctors = doctorRepository.findAll();
        return doctors.stream()
                .map(doctor -> {
                    List<DoctorAvailability> availabilities = availabilityRepository.findByDoctorId(doctor.getId());
                    return convertToDto(doctor, availabilities);
                })
                .collect(Collectors.toList());
    }

    public List<DoctorDto> getActiveDoctors() {
        List<Doctor> doctors = doctorRepository.findByActiveTrue();
        return doctors.stream()
                .map(doctor -> {
                    List<DoctorAvailability> availabilities = availabilityRepository.findByDoctorId(doctor.getId());
                    return convertToDto(doctor, availabilities);
                })
                .collect(Collectors.toList());
    }

    public Optional<DoctorDto> getDoctorById(String id) {
        Optional<Doctor> doctor = doctorRepository.findById(id);
        if (doctor.isPresent()) {
            List<DoctorAvailability> availabilities = availabilityRepository.findByDoctorId(id);
            return Optional.of(convertToDto(doctor.get(), availabilities));
        }
        return Optional.empty();
    }

    public List<DoctorDto> getDoctorsBySpecialization(String specialization) {
        List<Doctor> doctors = doctorRepository.findByActiveTrueAndSpecializationsContaining(specialization);
        return doctors.stream()
                .map(doctor -> {
                    List<DoctorAvailability> availabilities = availabilityRepository.findByDoctorId(doctor.getId());
                    return convertToDto(doctor, availabilities);
                })
                .collect(Collectors.toList());
    }

    public DoctorDto updateDoctor(String id, DoctorDto doctorDto) {
        Doctor doctor = doctorRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Doctor not found"));

        // Update doctor details
        doctor.setActive(doctorDto.isActive());
        doctor.setSpecializations(doctorDto.getSpecializations());
        
        if (doctorDto.getProfilePictureBase64() != null) {
            doctor.setProfilePicture(Base64.getDecoder().decode(doctorDto.getProfilePictureBase64()));
        }

        doctor = doctorRepository.save(doctor);

        // Update availabilities
        availabilityRepository.deleteByDoctorId(id);
        List<DoctorAvailability> newAvailabilities = new ArrayList<>();
        
        if (doctorDto.getAvailabilities() != null) {
            for (DoctorAvailabilityDto availDto : doctorDto.getAvailabilities()) {
                DoctorAvailability availability = new DoctorAvailability();
                availability.setDoctor(doctor);
                availability.setDayOfWeek(availDto.getDayOfWeek());
                availability.setStartTime(availDto.getStartTime());
                availability.setEndTime(availDto.getEndTime());
                availability.setAvailable(availDto.isAvailable());
                availability.setAppointmentDuration(availDto.getAppointmentDuration());
                newAvailabilities.add(availabilityRepository.save(availability));
            }
        }

        return convertToDto(doctor, newAvailabilities);
    }

    public void deleteDoctor(String id) {
        availabilityRepository.deleteByDoctorId(id);
        doctorRepository.deleteById(id);
    }

    private DoctorDto convertToDto(Doctor doctor, List<DoctorAvailability> availabilities) {
        DoctorDto dto = new DoctorDto();
        dto.setId(doctor.getId());
        dto.setActive(doctor.isActive());
        dto.setSpecializations(doctor.getSpecializations());
        
        // Convert profile picture to base64
        if (doctor.getProfilePicture() != null) {
            dto.setProfilePictureBase64(Base64.getEncoder().encodeToString(doctor.getProfilePicture()));
        }

        // Convert user
        UserDto userDto = new UserDto();
        userDto.setId(doctor.getUser().getId());
        userDto.setUsername(doctor.getUser().getUsername());
        userDto.setEmail(doctor.getUser().getEmail());
        userDto.setRole(doctor.getUser().getRole());
        // Don't include password in DTO
        dto.setUser(userDto);

        // Convert availabilities
        List<DoctorAvailabilityDto> availabilityDtos = availabilities.stream()
                .map(avail -> {
                    DoctorAvailabilityDto availDto = new DoctorAvailabilityDto();
                    availDto.setId(avail.getId());
                    availDto.setDoctorId(doctor.getId());
                    availDto.setDayOfWeek(avail.getDayOfWeek());
                    availDto.setStartTime(avail.getStartTime());
                    availDto.setEndTime(avail.getEndTime());
                    availDto.setAvailable(avail.isAvailable());
                    availDto.setAppointmentDuration(avail.getAppointmentDuration());
                    return availDto;
                })
                .collect(Collectors.toList());
        
        dto.setAvailabilities(availabilityDtos);
        return dto;
    }
}
