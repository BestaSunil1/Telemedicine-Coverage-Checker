package training.iqgateway.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import training.iqgateway.entities.Doctor;
import training.iqgateway.entities.Patient;
import training.iqgateway.entities.User;
import training.iqgateway.repositories.DoctorRepository;
import training.iqgateway.repositories.PatientRepository;
import training.iqgateway.repositories.UserRepository;


@Service
public class AdminService {

	@Autowired
	private  UserRepository userRepository;
	@Autowired
	private PatientRepository patientRepository;
	@Autowired
	private DoctorRepository doctorRepository;
	
	
	
	public User createUser(User user) {
		return userRepository.save(user);
	}
	
	public User getUserById(String id) {
		return userRepository.findById(id).orElse(null);
	}
	
	public User getByEmail(String email) {
		return userRepository.findByEmail(email);
	}
	
	public List<User> getUsersByRole(String role) {
		return userRepository.findByRole(role);
	}
	
	public List<User> getAllUsers() {
		return userRepository.findAll();
	}
	
	public User updateUser(User user) {
		if (userRepository.existsById(user.getId())) {
			return userRepository.save(user);
		}
		return null; 
	}
	
	public void deleteUser(String id) {
		userRepository.deleteById(id);
	}
	
	public Patient createPatient(Patient patient) {
		return patientRepository.save(patient);
	}
	
	public Patient getPatientById(String id) {
		return patientRepository.findById(id).orElse(null);
	}
	
	public List<Patient> getAllPatients() {
		return patientRepository.findAll();
	}
	
	public Patient updatePatient(Patient patient) {
		if (patientRepository.existsById(patient.getId())) {
			return patientRepository.save(patient);
		}
		return null;
	}
	
	public void deletePatient(String id) {
		patientRepository.deleteById(id);
	}
	
	public Doctor createDoctor(Doctor doctor) {
		return doctorRepository.save(doctor);
	}
	
	public Doctor getDoctorById(String id) {
		return doctorRepository.findById(id).orElse(null);
	}
	public List<Doctor> getAllDoctors() {
		return doctorRepository.findAll();
	}
	
	public Doctor updateDoctor(Doctor doctor) {
		if (doctorRepository.existsById(doctor.getId())) {
			return doctorRepository.save(doctor);
		}
		return null; 
	}
	
	public void deleteDoctor(String id) {
		doctorRepository.deleteById(id);
	}
}
