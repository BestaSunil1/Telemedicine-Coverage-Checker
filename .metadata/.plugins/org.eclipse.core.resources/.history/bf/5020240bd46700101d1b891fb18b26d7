package training.iqgateway.controllers;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import training.iqgateway.dto.LoginRequest;
import training.iqgateway.entities.User;
import training.iqgateway.service.AuthService;


@RestController
@RequestMapping("/api/auth")
@CrossOrigin("*")
public class AuthController {

    private final AuthService authService;

    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest, HttpServletResponse response) {
        try {
            // Authenticate the user (check email & password using BCrypt)
            User user = authService.authenticate(loginRequest.getEmail(), loginRequest.getPassword());

            // Generate JWT token
            String token = authService.generateToken(user);

            // Configure HttpOnly Cookie
            Cookie cookie = new Cookie("authToken", token);
            cookie.setHttpOnly(true);
            cookie.setSecure(false); // Use true for HTTPS
            cookie.setPath("/");
            cookie.setMaxAge(3600); // 1 hour
            cookie.setDomain("localhost"); // or remove this line safely
            response.addCookie(cookie);

            // Optionally: Set-Cookie header directly
            response.addHeader("Set-Cookie",
                    String.format("authToken=%s; HttpOnly; Path=/; Max-Age=3600; SameSite=None", token));

            // Prepare JSON response body (for frontend)
            Map<String, Object> responseBody = new HashMap<>();
            responseBody.put("message", "Login successful");
            responseBody.put("username", user.getUsername());
            responseBody.put("role", user.getRole().name());

            return ResponseEntity.ok(responseBody);

        } catch (RuntimeException ex) {
            return ResponseEntity
                    .status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", ex.getMessage()));
        }
    }

    @PostMapping("/logout")
    public ResponseEntity<Map<String, String>> logout(HttpServletRequest request, HttpServletResponse response) {
        try {
            User user = (User) request.getAttribute("authenticatedUser"); // Optional if using JWT verification

            authService.logout(user); // Optional implementation if needed

            // Invalidate the cookie
            Cookie cookie = new Cookie("authToken", null);
            cookie.setHttpOnly(true);
            cookie.setSecure(false); // Use true for HTTPS
            cookie.setPath("/");
            cookie.setMaxAge(0); // Delete immediately
            response.addCookie(cookie);

            Map<String, String> message = new HashMap<>();
            message.put("message", "Logout successful");
            return ResponseEntity.ok(message);

        } catch (Exception ex) {
            return ResponseEntity.status(500)
                    .body(Map.of("error", "Logout failed"));
        }
    }
}
