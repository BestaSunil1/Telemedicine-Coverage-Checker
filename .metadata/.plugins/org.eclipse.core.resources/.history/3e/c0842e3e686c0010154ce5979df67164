package training.iqgateway.controller;



import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import training.iqgateway.dtos.EligibilityCheckRequest;
import training.iqgateway.dtos.EligibilityCheckResponse;
import training.iqgateway.dtos.PatientInsuranceDTO;
import training.iqgateway.entities.EligibilityStatus;
import training.iqgateway.entities.InsuranceEligibility;
import training.iqgateway.service.InsuranceEligibilityService;

@RestController
@RequestMapping("/api/eligibility")
@Slf4j
@CrossOrigin(origins = "*")
public class InsuranceEligibilityController {
    
    @Autowired
    private InsuranceEligibilityService eligibilityService;
    
    @PostMapping("/check")
    public ResponseEntity<EligibilityCheckResponse> checkEligibility(
            @RequestBody @Valid EligibilityCheckRequest request) {
        
        log.info("Checking eligibility for patient: {} and plan: {}", 
                request.getPatientId(), request.getInsurancePlanId());
        
        EligibilityCheckResponse response = eligibilityService.checkEligibility(request);
        
        if (response.isEligibleForBooking()) {
            return ResponseEntity.ok(response);
        } else {
            return ResponseEntity.status(HttpStatus.ACCEPTED).body(response);
        }
    }
    
    @GetMapping("/patient/{patientId}/plans")
    public ResponseEntity<List<PatientInsuranceDTO>> getPatientInsurancePlans(
            @PathVariable String patientId) {
        
        log.info("Fetching insurance plans for patient: {}", patientId);
        
        List<PatientInsuranceDTO> plans = eligibilityService.getPatientInsurancePlans(patientId);
        return ResponseEntity.ok(plans);
    }
    
    @PutMapping("/verify/{eligibilityId}")
    public ResponseEntity<EligibilityCheckResponse> verifyEligibility(
            @PathVariable String eligibilityId,
            @RequestParam EligibilityStatus status,
            @RequestParam(required = false) String benefitDetails) {
        
        log.info("Verifying eligibility: {} with status: {}", eligibilityId, status);
        
        EligibilityCheckResponse response = eligibilityService.verifyEligibility(
                eligibilityId, status, benefitDetails);
        
        return ResponseEntity.ok(response);
    }
    
    @PostMapping("/create")
    public ResponseEntity<InsuranceEligibility> createEligibilityRecord(
            @RequestParam String patientId,
            @RequestParam String planId) {
        
        log.info("Creating eligibility record for patient: {} and plan: {}", patientId, planId);
        
        try {
            InsuranceEligibility eligibility = eligibilityService.createEligibilityRecord(patientId, planId);
            return ResponseEntity.status(HttpStatus.CREATED).body(eligibility);
        } catch (RuntimeException e) {
            log.error("Error creating eligibility record: ", e);
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping("/check-before-booking")
    public ResponseEntity<Map<String, Object>> checkEligibilityBeforeBooking(
            @RequestParam String patientId,
            @RequestParam String insurancePlanId) {
        
        EligibilityCheckRequest request = new EligibilityCheckRequest(patientId, insurancePlanId, null);
        EligibilityCheckResponse response = eligibilityService.checkEligibility(request);
        
        Map<String, Object> result = new HashMap<>();
        result.put("canBookAppointment", response.isEligibleForBooking());
        result.put("eligibilityDetails", response);
        
        if (response.isEligibleForBooking()) {
            result.put("statusCode", 200);
            result.put("message", "Patient is eligible to book appointment");
        } else {
            result.put("statusCode", 403);
            result.put("message", "Patient is not eligible to book appointment: " + response.getMessage());
        }
        
        return ResponseEntity.ok(result);
    }
    public ResponseEntity<?> getAllEligibilityRecords() {
		List<InsuranceEligibility> records = eligibilityService.getAllEligibilityRecords();
		if (records.isEmpty()) {
			return ResponseEntity.noContent().build();
		}
		return ResponseEntity.ok(records);
}
