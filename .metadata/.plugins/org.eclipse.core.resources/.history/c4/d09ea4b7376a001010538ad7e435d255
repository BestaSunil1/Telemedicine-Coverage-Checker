package training.iqgateway.repositories;

import java.util.List;

import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.mongodb.repository.Query;
import org.springframework.stereotype.Repository;

import training.iqgateway.entities.Doctor;
import training.iqgateway.entities.DoctorAvailability;


@Repository
public interface DoctorAvalilabilityRepository extends MongoRepository<DoctorAvailability, String> {

	// Custom query methods can be defined here if needed
	// For example, to find availability by doctor ID or date range
	DoctorAvailability findByDoctorId(String doctorId);
	List<DoctorAvailability> findByDate(String date);
	List<DoctorAvailability> findByDoctorIdAndDate(String doctorId, String date);
	List<DoctorAvailability> findByAppointmentDuration(Integer appointmentDuration);
	// Method using Spring Data JPA naming convention
    DoctorAvailability findByDoctorIdAndDayOfWeekAndIsAvailable(String doctorId, String dayOfWeek, boolean isAvailable);
    
    // Alternative method to find all availabilities for a doctor on a specific day
    List<DoctorAvailability> findByDoctorIdAndDayOfWeek(String doctorId, String dayOfWeek);
    
    // Method to find all available time slots for a doctor
    List<DoctorAvailability> findByDoctorIdAndIsAvailable(String doctorId, boolean isAvailable);
    
    // Custom query using @Query annotation (alternative approach)
    @Query("{ 'doctor.$id': ?0, 'day_of_week': ?1, 'is_available': ?2 }")
    DoctorAvailability findAvailabilityByDoctorAndDay(String doctorId, String dayOfWeek, boolean isAvailable);
    
    // Method to find availability by doctor object reference
    DoctorAvailability findByDoctorAndDayOfWeekAndIsAvailable(Doctor doctor, String dayOfWeek, boolean isAvailable);

}
