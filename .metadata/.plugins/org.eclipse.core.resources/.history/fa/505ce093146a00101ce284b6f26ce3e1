package training.iqgateway.services;

import java.time.LocalDateTime;
import java.util.List;

import javax.management.Notification;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import training.iqgateway.entities.Doctor;
import training.iqgateway.entities.Notifications;
import training.iqgateway.entities.Patient;
import training.iqgateway.entities.User;
import training.iqgateway.repositories.DoctorRepository;
import training.iqgateway.repositories.NotificationRepository;
import training.iqgateway.repositories.PatientRepository;
import training.iqgateway.repositories.UserRepository;

@Service
public class NotificationService {
	@Autowired
	private NotificationRepository notificationRepository;

	@Autowired
	private PatientRepository patientRepository;
	
	@Autowired
    private DoctorRepository doctorRepository;
	@Autowired
	private UserRepository userRepository;

	// Notify doctor of new appointment request
	public void notifyDoctorOfNewAppointment(String doctorId, String appointmentId, String patientId) {
		Patient patient = patientRepository.findById(patientId).orElse(null);
		User patientUser = userRepository.findById(patientId).orElse(null);
		String patientName = patient != null ? patientUser.getUsername() : "Unknown Patient";

		Notifications notification = new Notifications();
		Doctor doctor = doctorRepository.findById(doctorId).orElse(null);
		notification.set(doctorId);
		notification.setAppointmentId(appointmentId);
		notification.setNotificationType("appointment_request");
		notification.setMessage("New appointment request from " + patientName + ". Please review and respond.");
		notification.setScheduledFor(LocalDateTime.now());
		notification.setSentAt(LocalDateTime.now());

		notificationRepository.save(notification);
	}

	// Notify patient of appointment update
	public void notifyPatientOfAppointmentUpdate(String patientId, String appointmentId, String message) {
		Notification notification = new Notification();
		notification.setUserId(patientId);
		notification.setAppointmentId(appointmentId);
		notification.setNotificationType("appointment_update");
		notification.setMessage(message);
		notification.setScheduledFor(LocalDateTime.now());
		notification.setSentAt(LocalDateTime.now());

		notificationRepository.save(notification);
	}

	// Get notifications for user
	public List<Notification> getNotificationsForUser(String userId) {
		return notificationRepository.findByUserIdOrderByCreatedAtDesc(userId);
	}

	// Mark notification as read
	public void markAsRead(String notificationId) {
		Notification notification = notificationRepository.findById(notificationId).orElse(null);
		if (notification != null) {
			notification.setIsRead(true);
			notificationRepository.save(notification);
		}
	}

	// Get unread notifications
	public List<Notification> getUnreadNotifications(String userId) {
		return notificationRepository.findByUserIdAndIsReadOrderByCreatedAtDesc(userId, false);
	}
}
