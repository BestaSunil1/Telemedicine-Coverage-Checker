package training.iqgateway.service;




import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import lombok.extern.slf4j.Slf4j;
import training.iqgateway.dtos.EligibilityCheckRequest;
import training.iqgateway.dtos.EligibilityCheckResponse;
import training.iqgateway.dtos.PatientInsuranceDTO;
import training.iqgateway.entities.EligibilityStatus;
import training.iqgateway.entities.InsuranceCoverageStatus;
import training.iqgateway.entities.InsuranceEligibility;
import training.iqgateway.entities.InsurancePlan;
import training.iqgateway.entities.Patient;
import training.iqgateway.repositories.InsuranceEligibilityRepository;
import training.iqgateway.repositories.InsurancePlanRepository;
import training.iqgateway.repositories.PatientRepository;

@Service
@Transactional
@Slf4j
public class InsuranceEligibilityService {
    
    @Autowired
    private PatientRepository patientRepository;
    
    @Autowired
    private InsurancePlanRepository insurancePlanRepository;
    
    @Autowired
    private InsuranceEligibilityRepository eligibilityRepository;
    
    public EligibilityCheckResponse checkEligibility(EligibilityCheckRequest request) {
        try {
            // Find patient
            Patient patient = findPatient(request);
            System.out.println("Patient found: " + (patient != null ? patient.getId() : "null"));
            if (patient == null) {
                return createErrorResponse("Patient not found", request.getInsurancePlanId());
            }
            
            // Find insurance plan
            Optional<InsurancePlan> planOpt = insurancePlanRepository.findById(request.getInsurancePlanId());
            if (planOpt.isEmpty() || !planOpt.get().isActive()) {
                return createErrorResponse("Insurance plan not found or inactive", request.getInsurancePlanId());
            }
            System.out.println("Insurance plan found: " + planOpt.get().getId());
            InsurancePlan plan = planOpt.get();
            System.out.println("Insurance plan details: " + plan.getPlanName() + ", " + plan.getPlanProvider());
            // Check existing eligibility - ONLY CHECK, DON'T CREATE
            Optional<InsuranceEligibility> eligibilityOpt = 
                eligibilityRepository.findByPatientIdAndPlanId(patient.getId(), plan.getId());
            System.out.println("Eligibility found: " + (eligibilityOpt.isPresent() ? eligibilityOpt.get().getId() : "null"));
            if (eligibilityOpt.isPresent()) {
                return buildResponseFromExistingEligibility(patient, plan, eligibilityOpt.get());
            } else {
                // NO ELIGIBILITY RECORD FOUND - CANNOT BOOK
                return createNotFoundResponse(patient, plan);
            }
            
        } catch (Exception e) {
            log.error("Error checking eligibility: ", e);
            return createErrorResponse("Error checking eligibility: " + e.getMessage(), 
                                     request.getInsurancePlanId());
        }
    }
    
    public List<PatientInsuranceDTO> getPatientInsurancePlans(String patientId) {
        List<InsuranceEligibility> eligibilities = eligibilityRepository.findByPatientId(patientId);
        
        return eligibilities.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }
    
    public EligibilityCheckResponse verifyEligibility(String eligibilityId, EligibilityStatus status, String benefitDetails) {
        Optional<InsuranceEligibility> eligibilityOpt = eligibilityRepository.findById(eligibilityId);
        
        if (eligibilityOpt.isEmpty()) {
            return createErrorResponse("Eligibility record not found", null);
        }
        
        InsuranceEligibility eligibility = eligibilityOpt.get();
        eligibility.setStatus(status);
        eligibility.setBenefitDetails(benefitDetails);
        eligibility.setVerifiedAt(LocalDateTime.now());
        
        eligibilityRepository.save(eligibility);
        
        return buildResponseFromExistingEligibility(
            eligibility.getPatient(), 
            eligibility.getPlan(), 
            eligibility
        );
    }
    
    public InsuranceEligibility createEligibilityRecord(String patientId, String planId) {
        Patient patient = patientRepository.findById(patientId)
            .orElseThrow(() -> new RuntimeException("Patient not found"));
        
        InsurancePlan plan = insurancePlanRepository.findById(planId)
            .orElseThrow(() -> new RuntimeException("Insurance plan not found"));
        
        InsuranceEligibility eligibility = InsuranceEligibility.builder()
            .patient(patient)
            .plan(plan)
            .status(EligibilityStatus.PENDING)
            .build();
        
        return eligibilityRepository.save(eligibility);
    }
    
    private Patient findPatient(EligibilityCheckRequest request) {
        if (request.getPatientId() != null) {
            return patientRepository.findById(request.getPatientId()).orElse(null);
        } else if (request.getUserEmail() != null) {
            return patientRepository.findByUser_Email(request.getUserEmail()).orElse(null);
        }
        return null;
    }
    
    private EligibilityCheckResponse buildResponseFromExistingEligibility(
            Patient patient, InsurancePlan plan, InsuranceEligibility eligibility) {
        
        boolean isEligible = eligibility.getStatus() == EligibilityStatus.VERIFIED;
        InsuranceCoverageStatus coverageStatus = determineCoverageStatus(eligibility.getStatus());
        
        return EligibilityCheckResponse.builder()
            .patientId(patient.getId())
            .patientName(patient.getUser().getUsername())
            .insurancePlanId(plan.getId())
            .planName(plan.getPlanName())
            .planProvider(plan.getPlanProvider())
            .eligibilityStatus(eligibility.getStatus())
            .coverageStatus(coverageStatus)
            .benefitDetails(eligibility.getBenefitDetails())
            .verifiedAt(eligibility.getVerifiedAt())
            .isEligibleForBooking(isEligible)
            .message(getStatusMessage(eligibility.getStatus()))
            .build();
    }
    
    private EligibilityCheckResponse createNotFoundResponse(Patient patient, InsurancePlan plan) {
        return EligibilityCheckResponse.builder()
            .patientId(patient.getId())
            .patientName(patient.getUser().getUsername())
            .insurancePlanId(plan.getId())
            .planName(plan.getPlanName())
            .planProvider(plan.getPlanProvider())
            .eligibilityStatus(EligibilityStatus.NOTELIGIBLE)
            .coverageStatus(InsuranceCoverageStatus.NOT_COVERED)
            .isEligibleForBooking(false)
            .message("No eligibility record found. Please contact admin to verify your insurance eligibility.")
            .build();
    }
    
    private EligibilityCheckResponse createErrorResponse(String message, String planId) {
        return EligibilityCheckResponse.builder()
            .insurancePlanId(planId)
            .eligibilityStatus(EligibilityStatus.NOTELIGIBLE)
            .coverageStatus(InsuranceCoverageStatus.NOT_COVERED)
            .isEligibleForBooking(false)
            .message(message)
            .build();
    }
    
    private InsuranceCoverageStatus determineCoverageStatus(EligibilityStatus status) {
        switch (status) {
            case VERIFIED:
                return InsuranceCoverageStatus.COVERED;
            case NOTELIGIBLE:
            case EXPIRED:
                return InsuranceCoverageStatus.NOT_COVERED;
            case PENDING:
                return InsuranceCoverageStatus.PENDING;
            default:
                return InsuranceCoverageStatus.UNKNOWN;
        }
    }
    
    private String getStatusMessage(EligibilityStatus status) {
        switch (status) {
            case VERIFIED:
                return "Patient is eligible for insurance coverage";
            case PENDING:
                return "Eligibility verification is in progress";
            case NOTELIGIBLE:
                return "Patient is not eligible for this insurance plan";
            case EXPIRED:
                return "Insurance eligibility has expired";
            default:
                return "Unknown eligibility status";
        }
    }
    
    private PatientInsuranceDTO convertToDTO(InsuranceEligibility eligibility) {
        return PatientInsuranceDTO.builder()
            .eligibilityId(eligibility.getId())
            .planName(eligibility.getPlan().getPlanName())
            .planProvider(eligibility.getPlan().getPlanProvider())
            .planType(eligibility.getPlan().getPlanType())
            .planCost(eligibility.getPlan().getPlanCost())
            .status(eligibility.getStatus())
            .benefitDetails(eligibility.getBenefitDetails())
            .verifiedAt(eligibility.getVerifiedAt())
            .build();
    }
    
    public List<InsuranceEligibility> getAllEligibilities() {
		return eligibilityRepository.findAll();
}
